USE RideON2;

-- Query1: compare the revenue generarted by rides from kurukshetra to rides from ambala
-- ROLL UP used
-- trip location

SELECT 
    IF(PickupLocation IS NULL, 'Combined', PickupLocation) AS PickupLocation, 
    SUM(Price) AS TotalRevenue
FROM Trip
WHERE PickupLocation IN ('Ambala', 'Kurukshetra')
GROUP BY PickupLocation WITH ROLLUP;


-- Query2: How much revenue was generated by each cab type in the last year, sorted in descending order
-- ROLL UP used
-- cab type

SELECT 
    IFNULL(Vehicles.Model, 'Combined') AS Model, 
    SUM(Trip.Price) AS TotalRevenue 
FROM Trip 
LEFT JOIN Vehicles 
ON Trip.VehicleID = Vehicles.VehicleID 
WHERE YEAR(Trip.Date) = YEAR(CURRENT_DATE) - 1 
GROUP BY Model WITH ROLLUP 
ORDER BY CASE WHEN Model = 'Combined' THEN 1 ELSE 0 END, TotalRevenue DESC 
LIMIT 0, 200;

-- Query3: What is the percentage of rides that were completed with a payment method other than cash, grouped by the pickup location
-- Roll up
-- Payment method

SELECT 
    IF(Trip.PickupLocation IS NULL, 'Combined', Trip.PickupLocation) AS PickupLocation, 
    COUNT(CASE WHEN Payment.Type <> 'cash' THEN 1 END) / COUNT(*) * 100 AS NonCashRidePercentage
FROM 
    Trip
    JOIN Payment ON Trip.PaymentMethod = Payment.Payment_id
WHERE 
    YEAR(Trip.Date) = YEAR(CURRENT_DATE) - 1
GROUP BY 
    Trip.PickupLocation WITH ROLLUP;

-- Query4: the Driver table that calculates the total earnings of each driver by month and year:
-- implementation 1, using multidimension vehicleid driverid time 

SELECT d.DriverID, YEAR(t.Date) AS Year, MONTH(t.Date) AS Month, SUM(t.Price) AS Earnings
FROM Trip t
INNER JOIN Vehicles v ON t.VehicleID = v.VehicleID
INNER JOIN Driver d ON v.VehicleID = d.VehicleID
GROUP BY d.DriverID, YEAR(t.Date), MONTH(t.Date)
ORDER BY d.DriverID ASC;

-- -------------------
-- Query4: the Driver table that calculates the total earnings of each driver by month and year:
-- implementation 2, using multidimension vehicleid driverid time now joind by unions basically considering each subparts of multidimension table at one time 

-- normal query on maps created below
SELECT d.DriverID, YEAR(t.Date) AS Year, MONTH(t.Date) AS Month, SUM(t.Price) AS Earnings
FROM Trip t
INNER JOIN Vehicles v ON t.VehicleID = v.VehicleID
INNER JOIN Driver d ON v.VehicleID = d.VehicleID
GROUP BY d.DriverID, YEAR(t.Date), MONTH(t.Date)

-- 2nd dimension picking each entry from dimension 1 map it with respective time dimension |||||||||||| making representation  cross table type data 

UNION ALL
SELECT d.DriverID, YEAR(t.Date) AS Year, NULL AS Month, SUM(t.Price) AS Earnings
FROM Trip t
INNER JOIN Vehicles v ON t.VehicleID = v.VehicleID
INNER JOIN Driver d ON v.VehicleID = d.VehicleID
GROUP BY d.DriverID, YEAR(t.Date)

-- 1st dimension grouping of driverid and vehicle id ||||||||      1st dimension of cube
UNION ALL

SELECT d.DriverID, NULL AS Year, NULL AS Month, SUM(t.Price) AS Earnings
FROM Trip t

INNER JOIN Vehicles v ON t.VehicleID = v.VehicleID
INNER JOIN Driver d ON v.VehicleID = d.VehicleID
GROUP BY d.DriverID

ORDER BY DriverID ASC;


-- Query 5: How much did each customer spend on rides in each month of the year?
-- implementation 1, using multidimension customerid time 

SELECT 
    CustomerID, 
    YEAR(Date) AS Year, 
    MONTH(Date) AS Month, 
    SUM(Price) AS Total_Spent
FROM Trip 
GROUP BY CustomerID, YEAR(Date), MONTH(Date)
ORDER BY CustomerID ASC;



-- Query 5: How much did each customer spend on rides in each month of the year?
-- implementation 2, using group by set method implementaion
-- not optimal but asked by rubrics :(

-- making sets, optimal for specific query but for general result not baby it is not the right choice
-- group by set is the optimal soln but it is not supported by mysql 
-- so here is the representation of the inner working og group by set 


-- Query for the set (1, 2022, 11)
SELECT 
    1 AS CustomerID, 
    2022 AS Year, 
    11 AS Month, 
    SUM(Price) AS Total_Spent
FROM Trip 
WHERE CustomerID = 1 AND YEAR(Date) = 2022 AND MONTH(Date) = 11

UNION

-- Query for the set (1, 2022, 2)
SELECT 
    1 AS CustomerID, 
    2022 AS Year, 
    2 AS Month, 
    SUM(Price) AS Total_Spent
FROM Trip 
WHERE CustomerID = 1 AND YEAR(Date) = 2022 AND MONTH(Date) = 2

UNION

-- Query for the set (3, 2022, 10)
SELECT 
    3 AS CustomerID, 
    2022 AS Year, 
    10 AS Month, 
    SUM(Price) AS Total_Spent
FROM Trip 
WHERE CustomerID = 3 AND YEAR(Date) = 2022 AND MONTH(Date) = 10

UNION

-- Query for the set (2, 2022, 2)
SELECT 
    2 AS CustomerID, 
    2022 AS Year, 
    2 AS Month, 
    SUM(Price) AS Total_Spent
FROM Trip 
WHERE CustomerID = 2 AND YEAR(Date) = 2022 AND MONTH(Date) = 2